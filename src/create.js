import chalk from "chalk";
import symbol from "log-symbols";
import ora from "ora";
var ProgressBar = require("progress");
const { execSync } = require("child_process");

import {
    ifExistFold,
    prompt,
    downloadTemplate,
    updateJsonFile,
    hasYarn,
} from "./util";

let create = async(projectName) => {
    if (projectName === undefined) {
        console.log(symbol.error, chalk.red("ËØ∑ËæìÂÖ•È°πÁõÆÂêç"));
    } else {
        ifExistFold(projectName).then(() => {
            prompt().then((answer) => {
                // ÁõÆÂâçÂè™Âª∫‰∫Ü‰∏Ä‰∏™vueÁöÑÊ®°ÊùøÔºåÊâÄ‰ª•Âè™ËÉΩÂÖàË∑≥Ëøáreactüå∂
                if (answer.frame === "react") {
                    console.log(
                        symbol.warning,
                        chalk.yellow("reactÊ®°ÊùøËøòÂú®Ë∑Ø‰∏äÔºåËé´ÊÄ•Ëé´ÊÄ•~")
                    );
                    process.exit(1);
                }

                /**
                 * Ê†πÊçÆÁî®Êà∑ËæìÂÖ•ÁöÑÈÖçÁΩÆ‰ø°ÊÅØ‰∏ãËΩΩÊ®°Áâà&Êõ¥Êñ∞Ê®°ÁâàÈÖçÁΩÆ
                 * ‰∏ãËΩΩÊ®°ÁâàÊØîËæÉËÄóÊó∂,ËøôÈáåÈÄöËøáoraÊèíÂÖ•‰∏ãËΩΩloading, ÊèêÁ§∫Áî®Êà∑Ê≠£Âú®‰∏ãËΩΩÊ®°Áâà
                 */
                let loading = ora("Ê®°Êùø‰∏ãËΩΩ‰∏≠...");

                let Api = "";
                switch (answer.frame) {
                    case "vue":
                        Api = "direct:https://github.com/syl-template/vue-template";
                        break;
                    case "electron-vue":
                        Api =
                            "direct:https://github.com/syl-template/electron-vue-template";
                        break;
                    case "react":
                        Api = "direct:https://github.com/coder-syl/evue";
                        break;
                    default:
                        break;
                }
                loading.start(`Ê®°Êùø‰∏ãËΩΩ‰∏≠...${Api}
                `);

                downloadTemplate(projectName, Api).then(
                    () => {
                        loading.succeed("Ê®°Êùø‰∏ãËΩΩÂÆåÊàê");

                        // ‰∏ãËΩΩÂÆåÊàêÂêé,Ê†πÊçÆÁî®Êà∑ËæìÂÖ•Êõ¥Êñ∞ÈÖçÁΩÆÊñá‰ª∂
                        const fileName = `${projectName}/package.json`;
                        answer.name = projectName;
                        console.log(symbol.success, chalk.green("ÂºÄÂßãÊõ¥Êñ∞package.json"));
                        updateJsonFile(fileName, answer)
                            .then(
                                () => {
                                    console.log(
                                        symbol.success,
                                        chalk.green("package.jsonÊõ¥Êñ∞ÂÆåÊàê„ÄÇ")
                                    );
                                },
                                () => {
                                    console.log(
                                        symbol.success,
                                        chalk.green("package.jsonÊõ¥Êñ∞Â§±Ë¥•")
                                    );
                                }
                            )
                            .then(() => {
                                console.log(symbol.success, chalk.green("Ê≠£Âú®ÂÆâË£Ö‰æùËµñ"));
                                hasYarn() ?
                                    execSync("yarn install", {
                                        stdio: "inherit",
                                        cwd: `./${projectName}`,
                                    }) :
                                    execSync("npm install", {
                                        stdio: "inherit",
                                        cwd: `./${projectName}`,
                                    });
                            });
                    },
                    () => {
                        loading.fail("Ê®°Êùø‰∏ãËΩΩÂ§±Ë¥•");
                    }
                );
            });
        });
    }
};

module.exports = create;